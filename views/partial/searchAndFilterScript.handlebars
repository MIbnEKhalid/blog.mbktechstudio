<script>
    // Initialize posts data for search and filtering
    const allPosts = {{{ jsonStringify posts }}};
    let filteredPosts = [...allPosts];

    const searchInput = document.getElementById('searchInput');
    const searchResults = document.getElementById('searchResults');
    const filterToggleBtn = document.getElementById('filterToggleBtn');
    const filtersPanel = document.getElementById('filtersPanel');
    const postsGrid = document.getElementById('postsGrid');
    const resultsCount = document.getElementById('resultsCount');

    // Filter elements
    const sortFilter = document.getElementById('sortFilter');
    const authorFilter = document.getElementById('authorFilter');
    const categoryFilter = document.getElementById('categoryFilter');
    const timeFilter = document.getElementById('timeFilter');
    const resetFiltersBtn = document.getElementById('resetFiltersBtn');

    // Toggle filters panel
    filterToggleBtn.addEventListener('click', () => {
        filtersPanel.classList.toggle('active');
        filterToggleBtn.classList.toggle('active');
    });

    // Debounce function to prevent excessive searching
    function debounce(func, delay) {
        let timeoutId;
        return function (...args) {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => func.apply(this, args), delay);
        };
    }

    // Search posts function
    function searchPosts(searchTerm) {
        if (!searchTerm.trim()) {
            searchResults.innerHTML = '';
            searchResults.style.display = 'none';
            return;
        }

        const term = searchTerm.toLowerCase();
        const filtered = allPosts.filter(post => {
            const title = (post.title || '').toLowerCase();
            const content = (post.content_markdown || '').toLowerCase();
            const excerpt = (post.excerpt || '').toLowerCase();
            const categories = (post.categories || '').toLowerCase();

            return title.includes(term) ||
                content.includes(term) ||
                excerpt.includes(term) ||
                categories.includes(term);
        });

        // Display results
        if (filtered.length === 0) {
            searchResults.innerHTML = '<div class="search-result-item">No posts found</div>';
        } else {
            searchResults.innerHTML = filtered.map(post => `
            <a href="/post/${post.slug}" class="search-result-item">
                <div class="search-result-title">${post.title}</div>
                <div class="search-result-meta">
                    ${post.categories ? `<span class="search-result-category">${post.categories}</span>` : ''}
                    <span class="search-result-date">${new Date(post.created_at).toLocaleDateString()}</span>
                </div>
            </a>
        `).join('');
        }

        searchResults.style.display = 'block';
    }

    // Filter and sort posts
    function applyFilters() {
        const postCards = Array.from(document.querySelectorAll('.post-card'));
        
        // Get filter values
        const sortValue = sortFilter.value;
        const authorValue = authorFilter ? authorFilter.value : 'all';
        const categoryValue = categoryFilter ? categoryFilter.value : 'all';
        const timeValue = timeFilter.value;

        // Filter posts
        let visible = postCards.filter(card => {
            // Author filter
            if (authorValue !== 'all') {
                const author = card.getAttribute('data-author');
                if (author !== authorValue) return false;
            }

            // Category filter
            if (categoryValue !== 'all') {
                const categories = card.getAttribute('data-categories') || '';
                if (!categories.toLowerCase().includes(categoryValue.toLowerCase())) return false;
            }

            // Time filter
            if (timeValue !== 'all') {
                const createdAt = new Date(card.getAttribute('data-created-at'));
                const now = new Date();
                
                switch(timeValue) {
                    case 'today':
                        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                        if (createdAt < today) return false;
                        break;
                    case 'week':
                        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                        if (createdAt < weekAgo) return false;
                        break;
                    case 'month':
                        const monthAgo = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
                        if (createdAt < monthAgo) return false;
                        break;
                    case 'year':
                        const yearAgo = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());
                        if (createdAt < yearAgo) return false;
                        break;
                }
            }

            return true;
        });

        // Hide filtered out posts
        postCards.forEach(card => {
            if (visible.includes(card)) {
                card.style.display = '';
            } else {
                card.style.display = 'none';
            }
        });

        // Sort visible posts
        if (sortValue !== 'date-desc') {
            visible.sort((a, b) => {
                switch(sortValue) {
                    case 'date-asc':
                        return new Date(a.getAttribute('data-created-at')) - new Date(b.getAttribute('data-created-at'));
                    case 'title-asc':
                        return a.querySelector('.post-title a').textContent.localeCompare(
                            b.querySelector('.post-title a').textContent
                        );
                    case 'title-desc':
                        return b.querySelector('.post-title a').textContent.localeCompare(
                            a.querySelector('.post-title a').textContent
                        );
                    case 'popular':
                        return parseInt(b.getAttribute('data-comment-count') || 0) - 
                               parseInt(a.getAttribute('data-comment-count') || 0);
                    default:
                        return 0;
                }
            });

            // Reorder DOM elements
            visible.forEach(card => postsGrid.appendChild(card));
        }

        // Update results count
        resultsCount.textContent = `Showing ${visible.length} of ${postCards.length} posts`;
    }

    // Reset filters
    resetFiltersBtn.addEventListener('click', () => {
        sortFilter.value = 'date-desc';
        if (authorFilter) authorFilter.value = 'all';
        if (categoryFilter) categoryFilter.value = 'all';
        timeFilter.value = 'all';
        
        // Show all posts
        const postCards = document.querySelectorAll('.post-card');
        postCards.forEach(card => {
            card.style.display = '';
        });
        
        // Reset to original order (by date descending)
        const postsArray = Array.from(postCards);
        postsArray.sort((a, b) => {
            return new Date(b.getAttribute('data-created-at')) - new Date(a.getAttribute('data-created-at'));
        });
        postsArray.forEach(card => postsGrid.appendChild(card));
        
        // Update results count
        resultsCount.textContent = `Showing ${postCards.length} posts`;
    });

    // Add event listeners to all filters
    const filters = [sortFilter, timeFilter];
    if (authorFilter) filters.push(authorFilter);
    if (categoryFilter) filters.push(categoryFilter);
    
    filters.forEach(filter => {
        filter.addEventListener('change', applyFilters);
    });

    // Event listener for search with debounce
    searchInput.addEventListener('input', debounce((e) => {
        searchPosts(e.target.value);
    }, 300));

    // Close search results when clicking outside
    document.addEventListener('click', (e) => {
        if (!e.target.closest('.search-box-wrapper')) {
            searchResults.style.display = 'none';
        }
    });

    // Reopen search results when focusing on input
    searchInput.addEventListener('focus', () => {
        if (searchInput.value.trim()) {
            searchResults.style.display = 'block';
        }
    });

    // Check bookmarks and update badge display
    function updateBookmarkBadges() {
        const bookmarks = JSON.parse(localStorage.getItem('bookmarkedPosts')) || [];
        const bookmarkedIds = new Set(bookmarks.map(b => b.id));

        document.querySelectorAll('.post-card').forEach(card => {
            const postId = card.getAttribute('data-post-id');
            const badge = card.querySelector('.bookmark-badge');

            if (badge) {
                if (bookmarkedIds.has(postId)) {
                    badge.style.display = 'flex';
                } else {
                    badge.style.display = 'none';
                }
            }
        });
    }

    // Initialize bookmarks on page load
    document.addEventListener('DOMContentLoaded', updateBookmarkBadges);

    // Listen for storage changes (when bookmarks change in another tab)
    window.addEventListener('storage', updateBookmarkBadges);
</script>
