{{> partial/homeMetaData}}
<div class="section-container">
    <!-- Search and Filter Bar -->
    <div class="search-filter-container">
        <div class="search-box-wrapper">
            <input type="text" id="searchInput" class="search-input"
                placeholder="Search posts by title, category, or tags...">
            <div class="search-results" id="searchResults"></div>
        </div>

        <button class="filter-toggle-btn" id="filterToggleBtn">
            <i class="fas fa-filter"></i>
            <span>Filters</span>
        </button>
    </div>

    <!-- Filter Options Panel -->
    <div class="filters-panel" id="filtersPanel">
        <div class="filters-grid">
            <div class="filter-group">
                <label for="sortFilter">
                    <i class="fas fa-sort"></i>
                    Sort By
                </label>
                <select id="sortFilter" class="filter-select">
                    <option value="date-desc">Newest First</option>
                    <option value="date-asc">Oldest First</option>
                    <option value="title-asc">Title (A-Z)</option>
                    <option value="title-desc">Title (Z-A)</option>
                    <option value="popular">Most Popular</option>
                </select>
            </div>

            <div class="filter-group">
                <label for="authorFilter">
                    <i class="fas fa-user"></i>
                    Author
                </label>
                <select id="authorFilter" class="filter-select">
                    <option value="all">All Authors</option>
                    {{#each uniqueAuthors}}
                    <option value="{{this}}">{{this}}</option>
                    {{/each}}
                </select>
            </div>

            <div class="filter-group">
                <label for="categoryFilter">
                    <i class="fas fa-folder"></i>
                    Category
                </label>
                <select id="categoryFilter" class="filter-select">
                    <option value="all">All Categories</option>
                    {{#each uniqueCategories}}
                    <option value="{{this}}">{{this}}</option>
                    {{/each}}
                </select>
            </div>

            <div class="filter-group">
                <label for="timeFilter">
                    <i class="fas fa-clock"></i>
                    Time Period
                </label>
                <select id="timeFilter" class="filter-select">
                    <option value="all">All Time</option>
                    <option value="today">Today</option>
                    <option value="week">This Week</option>
                    <option value="month">This Month</option>
                    <option value="year">This Year</option>
                </select>
            </div>

            <div class="filter-actions">
                <button class="btn-reset-filters" id="resetFiltersBtn">
                    <i class="fas fa-undo"></i>
                    Reset Filters
                </button>
            </div>
        </div>
    </div>

    <!-- Results Count -->
    <div class="results-info">
        <span id="resultsCount">Showing {{posts.length}} posts</span>
    </div>

    {{#if posts.length}}
    <div class="posts-grid" id="postsGrid">
        {{#each posts}}
        <article class="post-card" data-post-id="{{this.id}}" data-author="{{this.UserName}}" data-categories="{{this.categories}}" data-created-at="{{this.created_at}}" data-comment-count="{{this.comment_count}}">
            {{#if this.preview_image}}
            <div class="post-image">
                <a href="/post/{{this.slug}}">
                    <img src="{{this.preview_image}}" alt="{{this.title}}" loading="lazy">
                </a>
                {{#if (eq this.status 'private')}}
                <div class="private-badge">
                    <i class="fas fa-lock"></i>
                    <span>Private</span>
                </div>
                {{/if}}
                <div class="bookmark-badge" style="display: none;">
                    <i class="fas fa-bookmark"></i>
                    <span>Bookmarked</span>
                </div>
            </div>
            {{/if}}
            <div class="post-meta">
                <div class="post-info">
                    <span class="author">By <a href="/author/{{this.UserName}}">{{this.UserName}}</a></span>
                    <span class="category">in {{#each (split this.categories ', ') as |category|}}
                        <a href="/category/{{encodeURIComponent category}}">{{trim category}}</a>{{#unless @last}},
                        {{/unless}}
                        {{/each}}</span>
                    <span class="date">{{formatDate this.created_at}}</span>
                </div>
            </div>
            <h2 class="post-title">
                <a href="/post/{{this.slug}}">{{this.title}}</a>
            </h2>
            <div class="post-content">
                {{#if this.excerpt}}
                {{truncate (stripMarkdown this.excerpt) 150}}
                {{else}}
                {{truncate (stripMarkdown this.content_markdown) 150}}
                {{/if}}
            </div>
            <div class="post-footer">
                <a href="/post/{{this.slug}}" class="read-more">Read More</a>
                <span class="comments-count">{{this.comment_count}} comments</span>
            </div>
        </article>
        {{/each}}
    </div>
    {{else}}
    <div class="empty-state">
        <h2>No posts found</h2>
        <p>Be the first to create a post!</p>
        {{#if user}}
        <a href="/dashboard/posts/create" class="btn btn-primary">Create New Post</a>
        {{else}}
        <a href="/mbkauthe/login" class="btn btn-primary">Login to Post</a>
        {{/if}}
    </div>
    {{/if}}
</div>

<script>
    // Initialize posts data for search and filtering
    const allPosts = {{{ jsonStringify posts }}};
    let filteredPosts = [...allPosts];

    const searchInput = document.getElementById('searchInput');
    const searchResults = document.getElementById('searchResults');
    const filterToggleBtn = document.getElementById('filterToggleBtn');
    const filtersPanel = document.getElementById('filtersPanel');
    const postsGrid = document.getElementById('postsGrid');
    const resultsCount = document.getElementById('resultsCount');

    // Filter elements
    const sortFilter = document.getElementById('sortFilter');
    const authorFilter = document.getElementById('authorFilter');
    const categoryFilter = document.getElementById('categoryFilter');
    const timeFilter = document.getElementById('timeFilter');
    const resetFiltersBtn = document.getElementById('resetFiltersBtn');

    // Toggle filters panel
    filterToggleBtn.addEventListener('click', () => {
        filtersPanel.classList.toggle('active');
        filterToggleBtn.classList.toggle('active');
    });

    // Debounce function to prevent excessive searching
    function debounce(func, delay) {
        let timeoutId;
        return function (...args) {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => func.apply(this, args), delay);
        };
    }

    // Search posts function
    function searchPosts(searchTerm) {
        if (!searchTerm.trim()) {
            searchResults.innerHTML = '';
            searchResults.style.display = 'none';
            return;
        }

        const term = searchTerm.toLowerCase();
        const filtered = allPosts.filter(post => {
            const title = (post.title || '').toLowerCase();
            const content = (post.content_markdown || '').toLowerCase();
            const excerpt = (post.excerpt || '').toLowerCase();
            const categories = (post.categories || '').toLowerCase();

            return title.includes(term) ||
                content.includes(term) ||
                excerpt.includes(term) ||
                categories.includes(term);
        });

        // Display results
        if (filtered.length === 0) {
            searchResults.innerHTML = '<div class="search-result-item">No posts found</div>';
        } else {
            searchResults.innerHTML = filtered.map(post => `
            <a href="/post/${post.slug}" class="search-result-item">
                <div class="search-result-title">${post.title}</div>
                <div class="search-result-meta">
                    ${post.categories ? `<span class="search-result-category">${post.categories}</span>` : ''}
                    <span class="search-result-date">${new Date(post.created_at).toLocaleDateString()}</span>
                </div>
            </a>
        `).join('');
        }

        searchResults.style.display = 'block';
    }

    // Filter and sort posts
    function applyFilters() {
        const postCards = Array.from(document.querySelectorAll('.post-card'));
        
        // Get filter values
        const sortValue = sortFilter.value;
        const authorValue = authorFilter.value;
        const categoryValue = categoryFilter.value;
        const timeValue = timeFilter.value;

        // Filter posts
        let visible = postCards.filter(card => {
            // Author filter
            if (authorValue !== 'all') {
                const author = card.getAttribute('data-author');
                if (author !== authorValue) return false;
            }

            // Category filter
            if (categoryValue !== 'all') {
                const categories = card.getAttribute('data-categories') || '';
                if (!categories.toLowerCase().includes(categoryValue.toLowerCase())) return false;
            }

            // Time filter
            if (timeValue !== 'all') {
                const createdAt = new Date(card.getAttribute('data-created-at'));
                const now = new Date();
                
                switch(timeValue) {
                    case 'today':
                        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                        if (createdAt < today) return false;
                        break;
                    case 'week':
                        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                        if (createdAt < weekAgo) return false;
                        break;
                    case 'month':
                        const monthAgo = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
                        if (createdAt < monthAgo) return false;
                        break;
                    case 'year':
                        const yearAgo = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());
                        if (createdAt < yearAgo) return false;
                        break;
                }
            }

            return true;
        });

        // Hide filtered out posts
        postCards.forEach(card => {
            if (visible.includes(card)) {
                card.style.display = '';
            } else {
                card.style.display = 'none';
            }
        });

        // Sort visible posts
        if (sortValue !== 'date-desc') {
            visible.sort((a, b) => {
                switch(sortValue) {
                    case 'date-asc':
                        return new Date(a.getAttribute('data-created-at')) - new Date(b.getAttribute('data-created-at'));
                    case 'title-asc':
                        return a.querySelector('.post-title a').textContent.localeCompare(
                            b.querySelector('.post-title a').textContent
                        );
                    case 'title-desc':
                        return b.querySelector('.post-title a').textContent.localeCompare(
                            a.querySelector('.post-title a').textContent
                        );
                    case 'popular':
                        return parseInt(b.getAttribute('data-comment-count') || 0) - 
                               parseInt(a.getAttribute('data-comment-count') || 0);
                    default:
                        return 0;
                }
            });

            // Reorder DOM elements
            visible.forEach(card => postsGrid.appendChild(card));
        }

        // Update results count
        resultsCount.textContent = `Showing ${visible.length} of ${postCards.length} posts`;
    }

    // Reset filters
    resetFiltersBtn.addEventListener('click', () => {
        sortFilter.value = 'date-desc';
        authorFilter.value = 'all';
        categoryFilter.value = 'all';
        timeFilter.value = 'all';
        
        // Show all posts
        const postCards = document.querySelectorAll('.post-card');
        postCards.forEach(card => {
            card.style.display = '';
        });
        
        // Reset to original order (by date descending)
        const postsArray = Array.from(postCards);
        postsArray.sort((a, b) => {
            return new Date(b.getAttribute('data-created-at')) - new Date(a.getAttribute('data-created-at'));
        });
        postsArray.forEach(card => postsGrid.appendChild(card));
        
        // Update results count
        resultsCount.textContent = `Showing ${postCards.length} posts`;
    });

    // Add event listeners to all filters
    [sortFilter, authorFilter, categoryFilter, timeFilter].forEach(filter => {
        filter.addEventListener('change', applyFilters);
    });

    // Event listener for search with debounce
    searchInput.addEventListener('input', debounce((e) => {
        searchPosts(e.target.value);
    }, 300));

    // Close search results when clicking outside
    document.addEventListener('click', (e) => {
        if (!e.target.closest('.search-box-wrapper')) {
            searchResults.style.display = 'none';
        }
    });

    // Reopen search results when focusing on input
    searchInput.addEventListener('focus', () => {
        if (searchInput.value.trim()) {
            searchResults.style.display = 'block';
        }
    });

    // Check bookmarks and update badge display
    function updateBookmarkBadges() {
        const bookmarks = JSON.parse(localStorage.getItem('bookmarkedPosts')) || [];
        const bookmarkedIds = new Set(bookmarks.map(b => b.id));

        document.querySelectorAll('.post-card').forEach(card => {
            const postId = card.getAttribute('data-post-id');
            const badge = card.querySelector('.bookmark-badge');

            if (badge) {
                if (bookmarkedIds.has(postId)) {
                    badge.style.display = 'flex';
                } else {
                    badge.style.display = 'none';
                }
            }
        });
    }

    // Initialize bookmarks on page load
    document.addEventListener('DOMContentLoaded', updateBookmarkBadges);

    // Listen for storage changes (when bookmarks change in another tab)
    window.addEventListener('storage', updateBookmarkBadges);
</script>