{{#section 'styles'}}
<title>Dashboard - Edit Post</title>
<style>
    :root {
        --primary-color: #2196F3;
        --primary-light: #e3f2fd;
        --danger-color: #dc3545;
        --success-color: #28a745;
        --border-color: #e0e0e0;
        --text-muted: #6c757d;
        --box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .edit-post-form {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
        background: var(--dark);
        border-radius: 8px;
        box-shadow: var(--box-shadow);
    }

    .form-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2.5rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid var(--border-color);
        gap: 1rem;
    }

    .form-header h1 {
        margin: 0;
        font-size: 1.8rem;
        color: var(--text-light);
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: var(--text-light);
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 2px solid var(--border-color);
        border-radius: 6px;
        background-color: var(--darker);
        color: var(--text-light);
        transition: border-color 0.2s, box-shadow 0.2s;
        font-size: 16px;
    }

    .form-control:focus {
        border-color: var(--primary-color);
        outline: none;
        box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.2);
    }

    .tag-management {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .tag-input {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        padding: 0.75rem;
        border: 2px solid var(--border-color);
        border-radius: 6px;
        background-color: var(--darker);
        min-height: 45px;
    }

    .tag-selector {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .tag-selector select {
        flex: 1;
    }

    .tag-selector input {
        flex: 1;
    }

    .custom-tag-input {
        display: flex;
        gap: 0.5rem;
        align-items: center;
        margin-top: 0.5rem;
    }

    .custom-tag-input input {
        flex: 1;
    }

    .category-management {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .category-input {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        padding: 0.75rem;
        border: 2px solid var(--border-color);
        border-radius: 6px;
        background-color: var(--darker);
        min-height: 45px;
    }

    .category-selector {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .category-selector select {
        flex: 1;
    }

    .category-selector input {
        flex: 1;
    }

    .search-results {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background-color: var(--darker);
        border: 2px solid var(--primary-color);
        border-top: none;
        border-radius: 0 0 6px 6px;
        max-height: 200px;
        overflow-y: auto;
        z-index: 1000;
        display: none;
    }

    /* Mobile Responsive */
    @media (max-width: 1024px) {
        .edit-post-form {
            padding: 1.5rem;
        }

        .form-header h1 {
            font-size: 1.5rem;
        }
    }

    @media (max-width: 768px) {
        .edit-post-form {
            padding: 1rem;
            border-radius: 4px;
        }

        .form-header {
            flex-direction: column;
            align-items: stretch;
            margin-bottom: 1.5rem;
            padding-bottom: 0.75rem;
        }

        .form-header h1 {
            font-size: 1.25rem;
        }

        .form-header .btn {
            width: 100%;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-label {
            font-size: 0.9rem;
            margin-bottom: 0.35rem;
        }

        .form-control {
            padding: 0.6rem;
            font-size: 16px;
        }

        .tag-selector,
        .category-selector {
            flex-wrap: wrap;
            gap: 0.25rem;
        }

        .tag-selector select,
        .tag-selector input,
        .category-selector select,
        .category-selector input {
            min-width: 100px;
        }

        .custom-tag-input {
            flex-direction: column;
            gap: 0.25rem;
        }

        .custom-tag-input input {
            width: 100%;
        }

        .custom-tag-input button {
            width: 100%;
        }
    }

    @media (max-width: 480px) {
        .edit-post-form {
            padding: 0.75rem;
        }

        .form-header {
            flex-direction: column;
            gap: 0.5rem;
        }

        .form-header h1 {
            font-size: 1.1rem;
        }

        .form-header .btn {
            font-size: 0.8rem;
            padding: 0.5rem 0.75rem;
        }

        .form-group {
            margin-bottom: 0.75rem;
        }

        .form-label {
            font-size: 0.8rem;
        }

        .form-control {
            padding: 0.5rem;
            font-size: 16px;
        }

        .tag-input,
        .category-input {
            padding: 0.5rem;
            gap: 0.25rem;
            min-height: 40px;
        }

        .tag-selector,
        .category-selector {
            gap: 0.25rem;
        }

        .tag-selector select,
        .tag-selector input,
        .category-selector select,
        .category-selector input {
            min-width: 70px;
            font-size: 0.85rem;
            padding: 0.4rem;
        }

        button {
            padding: 0.5rem 0.75rem;
            font-size: 0.75rem;
        }
    }

    .search-results.show {
        display: block;
    }

    .search-result-item {
        padding: 0.75rem;
        cursor: pointer;
        color: var(--text-light);
        border-bottom: 1px solid var(--border-color);
        transition: background-color 0.2s;
    }

    .search-result-item:hover {
        background-color: var(--primary-light);
        color: var(--primary-color);
    }

    .search-result-item:last-child {
        border-bottom: none;
    }

    .search-container {
        position: relative;
        flex: 1;
    }

    .tag {
        background-color: var(--primary-light);
        color: var(--primary-color);
        padding: 0.4rem 0.8rem;
        border-radius: 20px;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.9rem;
        transition: all 0.2s;
    }

    .tag:hover {
        background-color: #bbdefb;
    }

    .category {
        background-color: #e8f5e9;
        color: #2e7d32;
        padding: 0.4rem 0.8rem;
        border-radius: 20px;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.9rem;
        transition: all 0.2s;
    }

    .category:hover {
        background-color: #c8e6c9;
    }

    .category button {
        background: none;
        border: none;
        color: #2e7d32;
        cursor: pointer;
        padding: 0;
        font-size: 1rem;
        display: flex;
        align-items: center;
        transition: transform 0.2s;
    }

    .category button:hover {
        transform: scale(1.2);
    }

    .tag button {
        background: none;
        border: none;
        color: var(--primary-color);
        cursor: pointer;
        padding: 0;
        font-size: 1rem;
        display: flex;
        align-items: center;
        transition: transform 0.2s;
    }

    .tag button:hover {
        transform: scale(1.2);
    }

    .preview-image-container {
        border: 2px solid var(--border-color);
        border-radius: 8px;
        padding: 1.5rem;
        background-color: var(--darker);
        transition: border-color 0.2s;
    }

    .preview-image-container:hover {
        border-color: var(--primary-color);
    }

    .preview-image {
        max-width: 300px;
        max-height: 200px;
        border-radius: 8px;
        object-fit: cover;
        display: block;
        box-shadow: var(--box-shadow);
    }

    .current-preview {
        display: inline-block;
        margin-bottom: 1rem;
    }

    .text-muted {
        color: var(--text-muted) !important;
        font-size: 0.9rem;
        margin-top: 0.5rem;
    }

    .mt-3 {
        margin-top: 1rem !important;
    }

    .action-buttons {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        margin-top: 2.5rem;
        padding-top: 1.5rem;
        border-top: 2px solid var(--border-color);
    }

    .btn {
        padding: 0.75rem 1.5rem;
        font-size: 1rem;
        font-weight: 500;
        border-radius: 6px;
        transition: all 0.2s;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-primary {
        background-color: var(--primary-color);
        border: none;
        color: white;
    }

    .btn-primary:hover {
        background-color: #1976d2;
        transform: translateY(-1px);
    }

    .btn-secondary {
        background-color: transparent;
        border: 2px solid var(--border-color);
        color: var(--text-light);
    }

    .btn-secondary:hover {
        border-color: var(--primary-color);
        color: var(--primary-color);
    }

    .editor-controls {
        display: flex;
        gap: 0.5rem;
        align-items: center;
        flex-wrap: wrap;
        margin-bottom: 0.75rem;
    }

    .editor-wrapper {
        position: relative;
    }

    .editor-wrapper .editor-controls {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 10;
        margin-bottom: 0;
        max-width: calc(100% - 20px);
    }

    #previewBtn {
        background-color: var(--darker);
        border: 2px solid var(--border-color);
        color: var(--text-light);
        font-size: 0.9rem;
        padding: 0.5rem 1rem;
        border-radius: 4px;
        transition: all 0.2s;
        white-space: nowrap;
    }

    #previewBtn:hover {
        border-color: var(--primary-color);
        color: var(--primary-color);
    }

    #previewBtn.active {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
        color: white;
    }

    .toolbar-btn {
        background-color: var(--darker);
        border: 2px solid var(--border-color);
        color: var(--text-light);
        font-size: 0.9rem;
        padding: 0.5rem;
        border-radius: 4px;
        transition: all 0.2s;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        min-width: 36px;
        height: 36px;
    }

    .toolbar-btn:hover {
        border-color: var(--primary-color);
        color: var(--primary-color);
    }

    #markdownPreview {
        background-color: var(--darker);
        border: 2px solid var(--border-color);
        border-radius: 6px;
        padding: 1.5rem;
        margin-top: 1rem;
        line-height: 1.8;
        min-height: 300px;
        max-height: 600px;
        overflow-y: auto;
    }

    #markdownPreview.fullscreen {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        max-height: 100vh;
        margin: 0;
        border-radius: 0;
        z-index: 1000;
        padding: 3rem;
    }

    .split-view {
        display: flex;
        gap: 1rem;
        flex-direction: row;
    }

    .split-view #editorContainer {
        flex: 1;
        min-width: 0;
    }

    .split-view #content {
        width: 100%;
    }

    .split-view #markdownPreview {
        flex: 1;
        margin-top: 0;
        min-width: 0;
    }

    /* Mobile Responsive for Editor */
    @media (max-width: 768px) {
        .editor-wrapper .editor-controls {
            position: relative;
            top: 0;
            right: 0;
            margin-bottom: 0.75rem;
            gap: 0.35rem;
            justify-content: flex-start;
            max-width: 100%;
        }

        .toolbar-btn {
            min-width: 32px;
            height: 32px;
            padding: 0.4rem;
            font-size: 0.85rem;
        }

        #previewBtn {
            padding: 0.4rem 0.75rem;
            font-size: 0.85rem;
        }

        #previewBtn i {
            display: none;
        }

        #previewBtn::after {
            content: 'Preview';
        }

        #previewBtn.active::after {
            content: 'Edit';
        }

        .split-view {
            flex-direction: column;
            gap: 0.5rem;
        }

        .split-view #markdownPreview {
            max-height: 300px;
        }

        #markdownPreview {
            padding: 1rem;
            min-height: 200px;
            max-height: 400px;
        }

        #content {
            font-size: 13px;
        }
    }

    @media (max-width: 480px) {
        .editor-controls {
            gap: 0.25rem;
        }

        .toolbar-btn {
            min-width: 28px;
            height: 28px;
            padding: 0.3rem;
            font-size: 0.75rem;
            border-width: 1px;
        }

        #previewBtn {
            padding: 0.3rem 0.6rem;
            font-size: 0.75rem;
            border-width: 1px;
        }

        #markdownPreview {
            padding: 0.75rem;
            font-size: 0.9rem;
            min-height: 150px;
            max-height: 300px;
        }

        #content {
            font-size: 12px;
            padding: 0.6rem;
        }

        .split-view #markdownPreview {
            max-height: 200px;
        }
    }

    .toggle-switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

    .toggle-switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 34px;
    }

    .slider:before {
        position: absolute;
        content: "";
        height: 26px;
        width: 26px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: .4s;
        border-radius: 50%;
    }

    input:checked+.slider {
        background-color: #2196F3;
    }

    input:checked+.slider:before {
        transform: translateX(26px);
    }
</style>
{{/section}}

<div class="content-card">
    <form class="edit-post-form" id="editPostForm">
        <div class="form-header">
            <h1>{{#if post}}Edit Post{{else}}Create New Post{{/if}}</h1>
            <div class="status-controls">
                <select name="status" class="form-control">
                    <option value="draft" {{#if (eq post.status 'draft' )}}selected{{/if}}>Draft</option>
                    <option value="published" {{#if (eq post.status 'published' )}}selected{{/if}}>Published</option>
                    <option value="private" {{#if (eq post.status 'private' )}}selected{{/if}}>Private</option>
                </select>
            </div>
        </div>

        <div class="form-group">
            <label class="form-label" for="title">Title</label>
            <input type="text" class="form-control" id="title" name="title" value="{{post.title}}" required>
        </div>

        <div class="form-group">
            <label class="form-label" for="excerpt">Excerpt</label>
            <textarea class="form-control" id="excerpt" name="excerpt" rows="3">{{post.excerpt}}</textarea>
        </div>

        <div class="form-group">
            <label class="form-label">Preview Image URL</label>
            <div class="preview-image-container">
                {{#if post.preview_image}}
                <div class="current-preview mb-3">
                    <img src="{{post.preview_image}}" alt="Current preview" class="preview-image">
                </div>
                {{/if}}
                <div class="preview-url-input">
                    <input type="url" id="previewImage" name="preview_image" class="form-control"
                        placeholder="Enter image URL" value="{{post.preview_image}}" onchange="previewImageUrl(this)">
                    <small class="text-muted">Enter a valid image URL (https://example.com/image.jpg)</small>
                </div>
                <div id="imagePreview" class="mt-3" style="display: none;">
                    <img src="" alt="URL preview" class="preview-image">
                </div>
            </div>
        </div>

        <div class="form-group">
            <label class="form-label" for="content">Content (Markdown)</label>
            <div class="editor-controls">
                <button type="button" class="toolbar-btn" title="Bold (Ctrl+B)" onclick="insertMarkdown('**', '**')">
                    <i class="fas fa-bold"></i>
                </button>
                <button type="button" class="toolbar-btn" title="Italic (Ctrl+I)" onclick="insertMarkdown('*', '*')">
                    <i class="fas fa-italic"></i>
                </button>
                <button type="button" class="toolbar-btn" title="Heading" onclick="insertMarkdown('## ', '')">
                    <i class="fas fa-heading"></i>
                </button>
                <button type="button" class="toolbar-btn" title="Link" onclick="insertLink()">
                    <i class="fas fa-link"></i>
                </button>
                <button type="button" class="toolbar-btn" title="Code Block" onclick="insertCodeBlock()">
                    <i class="fas fa-code"></i>
                </button>
                <button type="button" class="toolbar-btn" title="Unordered List" onclick="insertMarkdown('- ', '')">
                    <i class="fas fa-list-ul"></i>
                </button>
                <button type="button" class="toolbar-btn" title="Ordered List" onclick="insertMarkdown('1. ', '')">
                    <i class="fas fa-list-ol"></i>
                </button>
                <button type="button" class="toolbar-btn" title="Quote" onclick="insertMarkdown('> ', '')">
                    <i class="fas fa-quote-right"></i>
                </button>
                <button type="button" class="toolbar-btn" title="Split View" id="splitViewBtn" onclick="toggleSplitView()">
                    <i class="fas fa-columns"></i>
                </button>
                <button type="button" id="previewBtn" class="btn btn-secondary" onclick="togglePreview()">
                    <i class="fas fa-eye"></i> Preview
                </button>
            </div>
            <div style="position: relative;">
                <div id="editorContainer">
                    <textarea class="form-control" id="content" name="content" rows="15"
                        style="font-family: 'Courier New', monospace; font-size: 14px;">{{#if post.content_markdown}}{{post.content_markdown}}{{else}}{{post.content}}{{/if}}</textarea>
                </div>
                <div id="markdownPreview" class="markdown-content" style="display: none;">
                </div>
            </div>
            <small style="color: #6c757d; margin-top: 0.5rem; display: block;">
                <i class="fas fa-info-circle"></i> Write your content in Markdown format. 
                Use the toolbar for quick formatting or keyboard shortcuts (Ctrl+B for bold, Ctrl+I for italic).
            </small>
        </div>

        <div class="form-group">
            <label class="form-label">Categories <span style="color: #dc3545;">*</span></label>
            <div class="category-management">
                <div class="category-input" id="categoryContainer">
                    {{#each post.categoryIds}}
                    <span class="category" data-category-id="{{this}}">
                        {{#getCategory ../categories this}}{{/getCategory}}
                        <button type="button" class="remove-category">&times;</button>
                    </span>
                    {{/each}}
                </div>
                <div class="category-selector">
                    <div class="search-container">
                        <input type="text" id="categorySearch" class="form-control" placeholder="Search categories...">
                        <div class="search-results" id="categoryResults"></div>
                    </div>
                    <select id="categorySelect" class="form-control" style="display: none;">
                        <option value="">Select a category...</option>
                        {{#each categories}}
                        <option value="{{id}}">{{name}}</option>
                        {{/each}}
                    </select>
                    <button type="button" id="addCategory" class="btn btn-secondary">Add Category</button>
                </div>
                <small class="text-muted">Select categories to assign to this post. At least one category is
                    required.</small>
            </div>
        </div>

        <div class="form-group">
            <label class="form-label">Tags</label>
            <div class="tag-management">
                <div class="tag-input" id="tagContainer">
                    {{#each post.tags}}
                    <span class="tag">
                        {{this}}
                        <button type="button" class="remove-tag">&times;</button>
                    </span>
                    {{/each}}
                </div>
                <div class="tag-selector">
                    <div class="search-container">
                        <input type="text" id="tagSearch" class="form-control" placeholder="Search tags...">
                        <div class="search-results" id="tagResults"></div>
                    </div>
                    <select id="tagSelect" class="form-control" style="display: none;">
                        <option value="">Select a tag...</option>
                        {{#each availableTags}}
                        <option value="{{name}}">{{name}}</option>
                        {{/each}}
                    </select>
                    <button type="button" id="addSelectedTag" class="btn btn-secondary">Add Tag</button>
                </div>
            </div>
        </div>

        <div class="action-buttons">
            <button type="button" class="btn btn-secondary" onclick="window.history.back()">Cancel</button>
            <button type="submit" class="btn btn-primary">
                {{#if post}}Update{{else}}Create{{/if}} Post
            </button>
        </div>
    </form>
</div>

{{#section 'scripts'}}
<script>
    (function () {
        const tagContainer = document.getElementById('tagContainer');
        const form = document.getElementById('editPostForm');

        // Check if required elements exist before adding event listeners
        if (!tagContainer || !form) {
            console.error('Required form elements not found');
            return;
        }

        // Handle predefined tags
        const tagSelect = document.getElementById('tagSelect');
        const tagSearch = document.getElementById('tagSearch');
        const tagResults = document.getElementById('tagResults');
        const addSelectedTag = document.getElementById('addSelectedTag');

        // Store all available tags
        const allTags = Array.from(tagSelect.options)
            .filter(option => option.value !== '')
            .map(option => ({ value: option.value, text: option.text }));

        if (tagSearch) {
            tagSearch.addEventListener('input', (e) => {
                filterAndShowTags(e.target.value);
            });

            // Close results when clicking outside
            document.addEventListener('click', (e) => {
                if (!e.target.closest('.search-container') && !e.target.closest('#tagResults')) {
                    tagResults.classList.remove('show');
                }
            });

            tagSearch.addEventListener('focus', () => {
                if (tagSearch.value || allTags.length > 0) {
                    filterAndShowTags(tagSearch.value);
                }
            });
        }

        function filterAndShowTags(searchTerm) {
            const filtered = allTags.filter(tag =>
                tag.text.toLowerCase().includes(searchTerm.toLowerCase())
            );

            tagResults.innerHTML = '';

            if (filtered.length === 0) {
                if (searchTerm) {
                    tagResults.innerHTML = '<div class="search-result-item" style="color: var(--text-muted);">No tags found</div>';
                }
                tagResults.classList.toggle('show', searchTerm.length > 0);
            } else {
                filtered.forEach(tag => {
                    const item = document.createElement('div');
                    item.className = 'search-result-item';
                    item.textContent = tag.text;
                    item.addEventListener('click', () => {
                        addTag(tag.value);
                        tagSearch.value = '';
                        tagResults.classList.remove('show');
                    });
                    tagResults.appendChild(item);
                });
                tagResults.classList.add('show');
            }
        }

        if (addSelectedTag) {
            addSelectedTag.addEventListener('click', () => {
                // Find the first visible tag from search results
                const visibleItems = tagResults.querySelectorAll('.search-result-item');
                if (visibleItems.length > 0 && visibleItems[0].textContent !== 'No tags found') {
                    visibleItems[0].click();
                }
            });
        }

        function addTag(text) {
            if (!text || !tagContainer) return;

            // Check if tag already exists
            const existingTags = Array.from(tagContainer.getElementsByClassName('tag'))
                .map(tag => tag.textContent.trim().replace('×', '').trim());

            if (existingTags.includes(text)) {
                return; // Don't add duplicate tags
            }

            const tag = document.createElement('span');
            tag.className = 'tag';
            tag.innerHTML = `
            ${text}
            <button type="button" class="remove-tag">&times;</button>
        `;
            tagContainer.appendChild(tag);
        }

        // Event delegation for tag removal
        tagContainer.addEventListener('click', (e) => {
            if (e.target.classList.contains('remove-tag')) {
                e.target.parentElement.remove();
            }
        });

        // Category management
        const categorySelect = document.getElementById('categorySelect');
        const categorySearch = document.getElementById('categorySearch');
        const categoryResults = document.getElementById('categoryResults');
        const addCategoryBtn = document.getElementById('addCategory');
        const categoryContainer = document.getElementById('categoryContainer');
        const categoriesJson = `{{{ jsonStringify categories }}}`;
        const categories = JSON.parse(categoriesJson);

        // Store all available categories
        const allCategories = Array.from(categorySelect.options)
            .filter(option => option.value !== '')
            .map(option => ({ value: parseInt(option.value, 10), text: option.text }));

        if (categorySearch) {
            categorySearch.addEventListener('input', (e) => {
                filterAndShowCategories(e.target.value);
            });

            // Close results when clicking outside
            document.addEventListener('click', (e) => {
                if (!e.target.closest('.search-container') && !e.target.closest('#categoryResults')) {
                    categoryResults.classList.remove('show');
                }
            });

            categorySearch.addEventListener('focus', () => {
                if (categorySearch.value || allCategories.length > 0) {
                    filterAndShowCategories(categorySearch.value);
                }
            });
        }

        function filterAndShowCategories(searchTerm) {
            const filtered = allCategories.filter(cat =>
                cat.text.toLowerCase().includes(searchTerm.toLowerCase())
            );

            categoryResults.innerHTML = '';

            if (filtered.length === 0) {
                if (searchTerm) {
                    categoryResults.innerHTML = '<div class="search-result-item" style="color: var(--text-muted);">No categories found</div>';
                }
                categoryResults.classList.toggle('show', searchTerm.length > 0);
            } else {
                filtered.forEach(cat => {
                    const item = document.createElement('div');
                    item.className = 'search-result-item';
                    item.textContent = cat.text;
                    item.addEventListener('click', () => {
                        addCategory(cat.value);
                        categorySearch.value = '';
                        categoryResults.classList.remove('show');
                    });
                    categoryResults.appendChild(item);
                });
                categoryResults.classList.add('show');
            }
        }

        if (addCategoryBtn) {
            addCategoryBtn.addEventListener('click', () => {
                // Find the first visible category from search results
                const visibleItems = categoryResults.querySelectorAll('.search-result-item');
                if (visibleItems.length > 0 && visibleItems[0].textContent !== 'No categories found') {
                    visibleItems[0].click();
                }
            });
        }

        function addCategory(categoryId) {
            if (!categoryId || !categoryContainer) return;

            // Check if category already exists
            const existingCategories = Array.from(categoryContainer.getElementsByClassName('category'))
                .map(cat => parseInt(cat.getAttribute('data-category-id'), 10));

            if (existingCategories.includes(categoryId)) {
                return; // Don't add duplicate categories
            }

            // Find category name
            const category = categories.find(c => c.id === categoryId);
            if (!category) return;

            const categoryElement = document.createElement('span');
            categoryElement.className = 'category';
            categoryElement.setAttribute('data-category-id', categoryId);
            categoryElement.innerHTML = `
            ${category.name}
            <button type="button" class="remove-category">&times;</button>
        `;
            categoryContainer.appendChild(categoryElement);
        }

        // Event delegation for category removal
        categoryContainer.addEventListener('click', (e) => {
            if (e.target.classList.contains('remove-category')) {
                e.target.parentElement.remove();
            }
        });

        // Handle form submission
        // Preview image URL function
        window.previewImageUrl = function (input) {
            const imagePreview = document.getElementById('imagePreview');
            const previewImg = imagePreview.querySelector('img');
            const currentPreview = document.querySelector('.current-preview');

            if (input.value) {
                // Update preview
                previewImg.src = input.value;
                imagePreview.style.display = 'block';

                // Hide current preview if exists
                if (currentPreview) {
                    currentPreview.style.display = 'none';
                }

                // Handle image load error
                previewImg.onerror = function () {
                    imagePreview.style.display = 'none';
                    if (currentPreview) {
                        currentPreview.style.display = 'block';
                    }
                    alert('Invalid image URL or image not accessible');
                };
            } else {
                imagePreview.style.display = 'none';
                if (currentPreview) {
                    currentPreview.style.display = 'block';
                }
            }
        };

        // Handle markdown preview
        const previewBtn = document.getElementById('previewBtn');
        const markdownPreview = document.getElementById('markdownPreview');
        const contentTextarea = document.getElementById('content');
        const editorContainer = document.getElementById('editorContainer');
        let isPreviewMode = false;
        let isSplitView = false;
        let previewUpdateTimeout;

        // Markdown toolbar functions
        window.insertMarkdown = function (before, after) {
            const textarea = contentTextarea;
            const start = textarea.selectionStart;
            const end = textarea.selectionEnd;
            const selectedText = textarea.value.substring(start, end);
            const replacement = before + selectedText + after;

            // Use document.execCommand to preserve undo history
            textarea.focus();
            
            // For modern browsers, use execCommand which maintains undo stack
            if (document.execCommand) {
                // First, delete the selected text if any
                if (start !== end) {
                    textarea.setSelectionRange(start, end);
                    document.execCommand('delete', false);
                }
                
                // Then insert the new text
                document.execCommand('insertText', false, replacement);
                
                // Set cursor position after the inserted text
                const newPosition = start + replacement.length;
                textarea.setSelectionRange(newPosition, newPosition);
            } else {
                // Fallback for browsers that don't support execCommand
                textarea.setRangeText(replacement, start, end, 'end');
            }

            // Update preview if in split view
            if (isSplitView) {
                updatePreview();
            }
        };

        window.insertLink = function () {
            const url = prompt('Enter URL:');
            if (url) {
                const text = prompt('Enter link text:', 'link text');
                if (text) {
                    insertMarkdown(`[${text}](${url})`, '');
                }
            }
        };

        window.insertCodeBlock = function () {
            const language = prompt('Enter language (e.g., javascript, python):', 'javascript');
            if (language !== null) {
                insertMarkdown(`\n\`\`\`${language}\n`, '\n\`\`\`\n');
            }
        };

        window.togglePreview = async function () {
            if (isSplitView) {
                // If in split view, exit split view first
                toggleSplitView();
                return;
            }

            isPreviewMode = !isPreviewMode;

            if (isPreviewMode) {
                await updatePreview();
                markdownPreview.style.display = 'block';
                editorContainer.style.display = 'none';
                previewBtn.innerHTML = '<i class="fas fa-edit"></i> Edit';
                previewBtn.classList.add('active');
            } else {
                markdownPreview.style.display = 'none';
                editorContainer.style.display = 'block';
                previewBtn.innerHTML = '<i class="fas fa-eye"></i> Preview';
                previewBtn.classList.remove('active');
            }
        };

        window.toggleSplitView = function () {
            isSplitView = !isSplitView;
            const splitViewBtn = document.getElementById('splitViewBtn');
            const parent = editorContainer.parentElement;

            if (isSplitView) {
                // Exit preview mode if active
                if (isPreviewMode) {
                    isPreviewMode = false;
                    previewBtn.innerHTML = '<i class="fas fa-eye"></i> Preview';
                    previewBtn.classList.remove('active');
                }

                parent.classList.add('split-view');
                editorContainer.style.display = 'block';
                markdownPreview.style.display = 'block';
                splitViewBtn.style.color = 'var(--primary-color)';
                updatePreview();

                // Add live preview update
                contentTextarea.addEventListener('input', handleLivePreview);
            } else {
                parent.classList.remove('split-view');
                markdownPreview.style.display = 'none';
                splitViewBtn.style.color = '';
                contentTextarea.removeEventListener('input', handleLivePreview);
            }
        };

        function handleLivePreview() {
            clearTimeout(previewUpdateTimeout);
            previewUpdateTimeout = setTimeout(updatePreview, 500);
        }

        async function updatePreview() {
            try {
                const content = contentTextarea.value;
                const response = await fetch('/dashboard/api/markdown-preview', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ markdown: content })
                });

                if (response.ok) {
                    const { html } = await response.json();
                    markdownPreview.innerHTML = html;

                    // Initialize markdown enhancer features
                    if (typeof window.initializeMarkdownFeatures === 'function') {
                        window.initializeMarkdownFeatures(markdownPreview);
                    }
                } else {
                    throw new Error('Failed to generate preview');
                }
            } catch (err) {
                console.error('Error generating preview:', err);
                markdownPreview.innerHTML = '<p style="color: var(--danger-color);">Failed to generate preview. Please check your markdown syntax.</p>';
            }
        }

        // Keyboard shortcuts
        contentTextarea.addEventListener('keydown', (e) => {
            if (e.ctrlKey || e.metaKey) {
                switch (e.key.toLowerCase()) {
                    case 'b':
                        e.preventDefault();
                        insertMarkdown('**', '**');
                        break;
                    case 'i':
                        e.preventDefault();
                        insertMarkdown('*', '*');
                        break;
                    case 'k':
                        e.preventDefault();
                        insertLink();
                        break;
                }
            }
        });

        if (form) {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();

                try {
                    // Get selected categories from the category container
                    const selectedCategoryElements = Array.from(categoryContainer.getElementsByClassName('category'));
                    const selectedCategories = selectedCategoryElements
                        .map(el => parseInt(el.getAttribute('data-category-id'), 10))
                        .filter(id => !isNaN(id));

                    // Validate that at least one category is selected
                    if (selectedCategories.length === 0) {
                        alert('Please select at least one category for the post');
                        categoryContainer.focus();
                        return;
                    }

                    const formData = new FormData();

                    // Add basic form fields
                    formData.append('title', form.querySelector('#title').value);
                    formData.append('content', form.querySelector('#content').value);
                    formData.append('excerpt', form.querySelector('#excerpt').value);
                    formData.append('preview_image', form.querySelector('#previewImage').value);
                    formData.append('status', form.querySelector('select[name="status"]').value);

                    // Add tags and categories to form data
                    const tags = Array.from(tagContainer.getElementsByClassName('tag'))
                        .map(tag => tag.textContent.trim().replace('×', '').trim())
                        .filter(tag => tag.length > 0);

                    formData.append('tags', JSON.stringify(tags));
                    formData.append('categories', JSON.stringify(selectedCategories));

                    const response = await fetch('{{#if post}}/dashboard/api/posts/{{post.id}}{{else}}/dashboard/api/posts{{/if}}', {
                        method: '{{#if post}}PUT{{else}}POST{{/if}}',
                        body: formData
                    });

                    if (response.ok) {
                        window.location.href = '/dashboard/posts';
                    } else {
                        const error = await response.json();
                        alert(error.message || 'Failed to save post');
                    }
                } catch (err) {
                    console.error('Error saving post:', err);
                    alert('An error occurred while saving the post');
                }
            });
        }
    })();
</script>
{{/section}}